name:  Test, build and deploy
on: [push,pull_request]
jobs:

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - run: flutter pub get
      - run: flutter  analyze
      - run: flutter test --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info

  build-Android:
    name: Build Android apk
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: populating .env
        env:
          API: ${{ secrets.API }}
        run: |
          # set up .env
          echo "populating .env"
          cat > ".env" <<EOF
          USERNAME = user
          PASSWORD = secret
          API = $API
          EOF
        shell: bash
      - name: populating android key.properties file
        env:
          CM_KEYSTORE: ${{ secrets.CM_KEYSTORE }}
          CM_KEYSTORE_PASSWORD: ${{ secrets.CM_KEYSTORE_PASSWORD }}
          CM_KEY_ALIAS_PASSWORD:  ${{ secrets.CM_KEYSTORE_PASSWORD }}
          CM_KEY_ALIAS_USERNAME: ${{ secrets.CM_KEY_ALIAS_USERNAME }}
        run: |
          # set up key.properties
          echo "setting up key.properties"
          sudo echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
          # set up key.properties
          echo "populating key.properties"
          sudo cat > "android/key.properties" <<EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_ALIAS_PASSWORD
          keyAlias=$CM_KEY_ALIAS_USERNAME
          storeFile=/tmp/keystore.keystore
          EOF
        shell: bash

      - name: populating firebase files
        env:
          ANDROID_FIREBASE_SECRET: ${{ secrets.ANDROID_FIREBASE_SECRET }}
        run: |
          sudo echo $ANDROID_FIREBASE_SECRET | base64 --decode > android/app/google-services.json
        shell: bash
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - run: flutter build apk --debug --split-per-abi

  build-iOS:
    name: Build iOS package
    if: github.event_name != 'pull_request'
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: populating .env
        env:
          API: ${{ secrets.API }}
        run: |
          # set up .env
          echo "populating .env"
          cat > ".env" <<EOF
          USERNAME = user
          PASSWORD = secret
          API = $API
          EOF
        shell: bash
      - name: populating firebase file
        env:
          IOS_FIREBASE_SECRET: ${{ secrets.IOS_FIREBASE_SECRET }}
          API: ${{ secrets.API }}
        run: |
          sudo echo $IOS_FIREBASE_SECRET | base64 --decode > ios/Runner/GoogleService-Info.plist
        shell: bash
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:

      - name: build iOS package
        run: flutter build ios --release --no-codesign